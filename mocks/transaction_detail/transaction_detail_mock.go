// Code generated by MockGen. DO NOT EDIT.
// Source: business/transaction_detail/domain.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	transaction_detail "finalProject/business/transaction_detail"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockUsecase) Fetch(ctx context.Context, page, perpage int) ([]transaction_detail.Domain, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, page, perpage)
	ret0, _ := ret[0].([]transaction_detail.Domain)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch.
func (mr *MockUsecaseMockRecorder) Fetch(ctx, page, perpage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockUsecase)(nil).Fetch), ctx, page, perpage)
}

// GetAll mocks base method.
func (m *MockUsecase) GetAll(ctx context.Context) ([]transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUsecaseMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsecase)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockUsecase) GetByID(ctx context.Context, transactionId int) (transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, transactionId)
	ret0, _ := ret[0].(transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsecaseMockRecorder) GetByID(ctx, transactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsecase)(nil).GetByID), ctx, transactionId)
}

// Store mocks base method.
func (m *MockUsecase) Store(ctx context.Context, coffeesDomain *transaction_detail.Domain) (transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, coffeesDomain)
	ret0, _ := ret[0].(transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockUsecaseMockRecorder) Store(ctx, coffeesDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUsecase)(nil).Store), ctx, coffeesDomain)
}

// Update mocks base method.
func (m *MockUsecase) Update(ctx context.Context, coffeesDomain *transaction_detail.Domain) (*transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, coffeesDomain)
	ret0, _ := ret[0].(*transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUsecaseMockRecorder) Update(ctx, coffeesDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecase)(nil).Update), ctx, coffeesDomain)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockRepository) Fetch(ctx context.Context, page, perpage int) ([]transaction_detail.Domain, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, page, perpage)
	ret0, _ := ret[0].([]transaction_detail.Domain)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRepositoryMockRecorder) Fetch(ctx, page, perpage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRepository)(nil).Fetch), ctx, page, perpage)
}

// Find mocks base method.
func (m *MockRepository) Find(ctx context.Context) ([]transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), ctx)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, coffeesId int) (transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, coffeesId)
	ret0, _ := ret[0].(transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, coffeesId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, coffeesId)
}

// Store mocks base method.
func (m *MockRepository) Store(ctx context.Context, coffeesDomain *transaction_detail.Domain) (transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, coffeesDomain)
	ret0, _ := ret[0].(transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(ctx, coffeesDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), ctx, coffeesDomain)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, coffeesDomain *transaction_detail.Domain) (transaction_detail.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, coffeesDomain)
	ret0, _ := ret[0].(transaction_detail.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, coffeesDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, coffeesDomain)
}
